(()=>{"use strict";var t=function(){function t(){}return t.getTitle=function(){return document.title},t.setTitle=function(t){document.title=t},t.setCssImport=function(t){var n=document.createElement("link");n.rel="stylesheet",n.href=t,document.head.appendChild(n)},t.id=function(t){return document.getElementById(t)},t.q=function(t){return document.querySelector(t)},t}(),n=function(t){return t.replace(/\r?\n|\r|\s{4}/g,"")},e=[],o=document.getElementsByTagName("artika-app")[0];if(null==o)throw console.log("%c<artika-app></artika-app>%c declaration not found!","color: white; background-color: blue; font-size: 1.2em","color: red; font-size: 1.2em"),new Error("<artika-app> NOT FOUND!");o.innerHTML=function(){switch(t.setCssImport("global.css"),window.location.pathname){case"/":return n(""+(o={titleText:"fromwork is terriblen't"},function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];t.forEach((function(t){e.push(t)}))}((function(){t.id("title").innerText+=o.titleText})),n('\n\n        <button></button>\n        <h1 id="title">Example page with text:&nbsp</h1>\n\n    ')));default:return n("<h1>"+window.location.pathname+" not found! 404</h1>")}var o}(),e.forEach((function(t){t()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,