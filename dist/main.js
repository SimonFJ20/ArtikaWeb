(()=>{"use strict";var t=function(){function t(){}return t.setTitle=function(t){document.title=t},t.setCssImport=function(t){var e=document.createElement("link");e.rel="stylesheet",e.href=t,document.head.appendChild(e)},t.id=function(t){return document.getElementById(t)},t.q=function(t){return document.querySelector(t)},t}(),e=function(t){return t.replace(/\r?\n|\r|\s{4}/g,"")},n=[],o=document.getElementsByTagName("artika-app")[0];if(null==o)throw console.log("%c<artika-app></artika-app>%c declaration not found!","color: white; background-color: blue; font-size: 1.2em","color: red; font-size: 1.2em"),new Error("<artika-app> NOT FOUND!");o.innerHTML=function(){switch(t.setCssImport("global.css"),window.location.pathname){case"/":return e(""+(o={titleText:"fromwork is teamwork"},function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];t.forEach((function(t){n.push(t)}))}((function(){t.id("title").innerText+=o.titleText})),e('\n\n        <h1 id="title">Samplepage with text:&nbsp</h1>\n\n    ')));default:return e("<h1>"+window.location.pathname+" not found! 404</h1>")}var o}(),n.forEach((function(t){t()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,